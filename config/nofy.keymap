#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

// 参考https://note.com/kloir_z/n/n314e739f03a1

#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&mkp_input_listener { input-processors = <&zip_temp_layer 5 500>; };

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 4>;
        };

        eng {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <18 17>;
        };

        jp {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <24 23>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off 4>;
            label = "exit_AML";
        };

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };

        scroll_up: scroll_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&msc SCRL_UP>;
            label = "SCROLL_UP";
        };

        scroll_down: scroll_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>;
            label = "SCROLL_DOWN";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo &to_layer_0>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        encoder_behavior: encoder_behavior {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_BEHAVIOR";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        mt_trans: mt_trans {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_TRANS";
            bindings = <&kp>, <&trans>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mt_boot: mt_boot {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_BOOT";
            bindings = <&bootloader>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <50000>;
        };

        test: test {
            compatible = "zmk,behavior-hold-tap";
            label = "TEST";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <50000>;
        };

        td_RtoL1: td_RtoL1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RTOL1";
            #binding-cells = <0>;
            bindings = <&lt 1 RIGHT>, <&mt RIGHT RIGHT>;
        };

        td_LtoL2: td_LtoL2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LTOL2";
            #binding-cells = <0>;
            bindings = <&lt 2 LEFT>, <&kp LEFT>;
        };

        td_DeltoL3: td_DeltoL3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DELTOL3";
            #binding-cells = <0>;
            bindings = <&lt 3 DELETE>, <&kp DELETE>;
        };

        td_SPtoShift: td_SPtoShift {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SPTOSHIFT";
            #binding-cells = <0>;
            bindings = <&mt LEFT_SHIFT SPACE>, <&kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp N1  &kp Q                  &kp W         &kp E         &kp R      &kp T          &mt_trans LS(ESCAPE) 0    &mt_trans ESC 0  &kp Y          &kp U             &kp I      &kp O    &kp P        &kp F1
&kp N2  &kp A                  &kp S         &kp D         &kp F      &kp G          &kp MINUS                 &kp SEMI         &kp H          &kp J             &kp K      &kp L    &lt 4 ENTER  &kp F2
&kp N3  &kp Z                  &kp X         &kp C         &kp V      &kp B          &kp RBKT                  &kp NUHS         &kp N          &kp M             &kp COMMA  &kp DOT  &lt 5 SLASH  &kp F3
        &mt LEFT_CONTROL INT1  &kp LEFT_ALT  &kp LEFT_WIN  &td_LtoL2  &td_SPtoShift  &td_RtoL1                 &td_DeltoL3      &kp BACKSPACE  &lt 1 UNDERSCORE
            >;

            sensor-bindings =
                <&inc_dec_kp LEFT RIGHT>,
                <&inc_dec_kp UP_ARROW DOWN>;
        };

        NUM {
            bindings = <
&trans  &kp LBKT      &kp EQUAL     &kp SQT       &kp LS(N6)    &kp INT3  &trans       &bootloader  &sys_reset  &trans  &trans  &trans  &to 7   &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp EQUAL    &trans       &trans      &trans  &trans  &trans  &trans  &trans
&trans  &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0    &kp MINUS    &kp PLUS     &trans      &trans  &trans  &trans  &trans  &trans
        &bootloader   &trans        &trans        &trans        &trans    &trans       &kp LC(V)    &kp LC(C)   &trans
            >;
        };

        ShiftNUM {
            bindings = <
&trans  &kp LS(N7)        &kp LS(EQUAL)  &kp LS(COLON)  &kp LS(INT3)  &kp LS(INT1)  &trans           &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(NUMBER_1)  &kp LS(N2)     &kp LS(N3)     &kp LS(N4)    &kp LS(N5)    &kp LS(INT1)     &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(N6)        &kp LS(N7)     &kp LS(N8)     &kp LS(N9)    &kp LS(N0)    &kp LS(MINUS)    &kp ASTERISK  &trans  &trans  &trans  &trans  &trans  &trans
        &trans            &trans         &trans         &trans        &trans        &trans           &trans        &trans  &trans
            >;
        };

        Shortcut {
            bindings = <
&trans  &trans      &trans     &trans           &trans      &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(F2)  &kp LC(S)  &kp LC(L)        &kp LC(Y)   &kp LC(Z)  &kp F12      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans     &kp LS(N8)       &kp LS(N9)  &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans      &trans     &kp PRINTSCREEN  &trans      &kp LC(C)  &kp LC(V)    &trans  &trans  &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans    &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_DOWN K_SCROLL_UP>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        game {
            bindings = <
&trans  &kp ESC    &kp N1        &kp N2  &kp N3  &kp N4     &kp N5           &trans  &trans  &trans  &trans  &trans  &to 0   &trans
&trans  &kp TAB    &kp Q         &kp W   &kp E   &kp R      &kp T            &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LSHFT  &kp A         &kp S   &kp D   &kp F      &kp G            &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &kp LCTRL  &kp LEFT_ALT  &trans  &kp F1  &kp SPACE  &kp LC(SPACE)    &trans  &trans  &trans
            >;
        };
    };
};
