#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 100

// 参考https://note.com/kloir_z/n/n314e739f03a1

#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [ß
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 4>;
        };

        eng {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <18 17>;
        };

        jp {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <24 23>;
        };

        left-boot {
            bindings = <&bootloader>;
            key-positions = <42 47 5>;
        };

        right-boot {
            bindings = <&bootloader>;
            key-positions = <48 50 8>;
        };

        sys-reset {
            bindings = <&sys_reset>;
            key-positions = <8 12>;
        };
    };

    macros {
        test: sg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp SPACE>,
                <&macro_tap>,
                <&kp LEFT_CONTROL>,
                <&macro_press>;

            label = "SG";
        };

        win_tab: win_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_WIN>,
                <&macro_press>,
                <&macro_wait_time 20>,
                <&kp TAB>,
                <&macro_tap>,
                <&macro_wait_time 150>,
                <&kp LEFT_WIN>,
                <&macro_release>;

            label = "WIN_TAB";
        };
    };

    behaviors {
        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        mt_trans: mt_trans {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_TRANS";
            bindings = <&kp>, <&trans>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        HoldToLayer: HoldToLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTOLAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
        };

        HoldToKey: HoldToKey {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTOKEY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
        };

        scroll_up_down: mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        scroll_right_left: mouse_wheel_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };
    };

    //--------USキーボードの記号を日本語OSで表示通りに入力するための処理-----------------------------
    //`~マーク

    jis_GRAVE: jis_GRAVE {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_GRAVE";
        #binding-cells = <0>;
        bindings = <&kp LS(LBKT)>, <&kp EQUAL>;

        //通常時でもレフトシフトするようにしてある。

        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;  //shiftを押しっぱなしにするための記述
    };

    //@マーク

    jis_N2: jis_N2 {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_N2";
        #binding-cells = <0>;
        bindings = <&kp N2>, <&kp LBKT>;

        mods = <(MOD_LSFT|MOD_RSFT)>;

        //keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //^マーク

    jis_N6: jis_N6 {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_N6";
        #binding-cells = <0>;
        bindings = <&kp N6>, <&kp EQUAL>;

        mods = <(MOD_LSFT|MOD_RSFT)>;

        //keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        //&マーク
    };

    jis_N7: jis_N7 {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_N7";
        #binding-cells = <0>;
        bindings = <&kp N7>, <&kp N6>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //アスタリスクマーク

    jis_N8: jis_N8 {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_N8";
        #binding-cells = <0>;
        bindings = <&kp N8>, <&kp SQT>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    // (マーク

    jis_N9: jis_N9 {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_N9";
        #binding-cells = <0>;
        bindings = <&kp N9>, <&kp N8>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    // )マーク

    jis_N0: jis_N0 {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_N0";
        #binding-cells = <0>;
        bindings = <&kp N0>, <&kp N9>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //アンダーバー

    jis_MINUS: jis_MINUS {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_MINUS";
        #binding-cells = <0>;
        bindings = <&kp MINUS>, <&kp INT1>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //イコールとプラス

    jis_EQUAL: jis_EQUAL {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_EQUAL";
        #binding-cells = <0>;
        bindings = <&kp LS(MINUS)>, <&kp SEMI>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    // [マーク

    jis_LBKT: jis_LBKT {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_LBKT";
        #binding-cells = <0>;
        bindings = <&kp RBKT>, <&kp RBKT>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    // ]マーク

    jis_RBKT: jis_RBKT {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_RBKT";
        #binding-cells = <0>;
        bindings = <&kp BSLH>, <&kp BSLH>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    // yenマーク

    jis_BSLH: jis_BSLH {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_BSLH";
        #binding-cells = <0>;
        bindings = <&kp INT3>, <&kp INT3>;

        //INT3ではないかも

        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //コロンセミコロン

    jis_SEMI: jis_SEMI {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_SEMI";
        #binding-cells = <0>;
        bindings = <&kp SEMI>, <&kp SQT>;

        mods = <(MOD_LSFT|MOD_RSFT)>;

        //keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //クオーテーション

    jis_SQT: jis_SQT {
        compatible = "zmk,behavior-mod-morph";
        label = "jis_SQT";
        #binding-cells = <0>;
        bindings = <&kp LS(N7)>, <&kp N2>;

        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp LA(TAB)    &kp Q             &kp W         &kp E         &kp R                &kp T                        &mt_trans ESCAPE 0      &mt_trans ESC 0        &kp Y          &kp U          &kp I      &kp O    &kp P        &kp F1
&kp LC(Z)      &kp A             &kp S         &kp D         &kp F                &kp G                        &kp MINUS               &kp SEMI               &kp H          &kp J          &kp K      &kp L    &lt 4 ENTER  &kp F2
&kp LS(LC(Z))  &kp Z             &kp X         &kp C         &kp V                &kp B                        &jis_LBKT               &jis_RBKT              &kp N          &kp M          &kp COMMA  &kp DOT  &lt 5 SLASH  &kp F3
               &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_WIN  &HoldToLayer 2 LEFT  &HoldToKey LEFT_SHIFT SPACE  &HoldToLayer 1 RIGHT    &HoldToLayer 3 DELETE  &kp BACKSPACE  &kp BACKSLASH
            >;

            sensor-bindings =
                <&inc_dec_kp LEFT RIGHT>,
                <&inc_dec_kp UP_ARROW DOWN>;
        };

        NUM {
            bindings = <
&trans  &kp LBKT      &kp EQUAL     &kp SQT       &kp LS(N6)    &kp INT3  &trans       &kp K_MUTE  &trans     &trans  &trans  &trans  &to 7   &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp EQUAL    &trans      &trans     &trans  &trans  &trans  &trans  &trans
&trans  &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0    &kp MINUS    &kp PLUS    &trans     &trans  &trans  &trans  &trans  &trans
        &trans        &trans        &trans        &trans        &trans    &trans       &kp LC(V)   &kp LC(C)  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>,
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        ShiftNUM {
            bindings = <
&trans  &kp LS(N7)        &kp LS(EQUAL)  &kp LS(COLON)  &kp LS(INT3)  &kp LS(INT1)  &trans           &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(NUMBER_1)  &kp LS(N2)     &kp LS(N3)     &kp LS(N4)    &kp LS(N5)    &kp LS(INT1)     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(N6)        &kp LS(N7)     &kp LS(N8)     &kp LS(N9)    &kp LS(N0)    &kp LS(MINUS)    &kp LS(SQT)  &trans  &trans  &trans  &trans  &trans  &trans
        &trans            &trans         &trans         &trans        &trans        &trans           &trans       &trans  &trans
            >;
        };

        Shortcut {
            bindings = <
&trans  &trans      &trans     &trans           &trans      &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(F2)  &kp LC(S)  &kp LC(L)        &kp LC(Y)   &kp LC(Z)  &kp F12      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans     &kp LS(N8)       &kp LS(N9)  &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans      &trans     &kp PRINTSCREEN  &trans      &kp LC(C)  &kp LC(V)    &trans  &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp BACKSPACE DELETE>,
                <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans    &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_right_left>, <&scroll_up_down>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        BootLoader {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &bootloader    &bootloader  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans         &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans         &trans       &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans         &trans       &trans  &trans
            >;
        };

        game {
            bindings = <
&trans  &kp ESC    &kp N1        &kp N2  &kp N3  &kp N4     &kp M     &trans  &trans  &trans  &trans  &trans  &to 0   &trans
&trans  &kp TAB    &kp Q         &kp W   &kp E   &kp R      &kp T     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LSHFT  &kp A         &kp S   &kp D   &kp F      &kp G     &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &kp LCTRL  &kp LEFT_ALT  &trans  &kp F1  &kp SPACE  &trans    &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };
    };
};
